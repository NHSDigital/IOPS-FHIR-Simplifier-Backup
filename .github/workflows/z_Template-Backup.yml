name: REPLACE_WITH_VARIABLE Backup
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * */1 *'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set today
        id: today
        run: |
          echo "TODAY=$(date)" >> $GITHUB_OUTPUT
          echo $github.action
          echo ${{ github.action }}

      - name: Set branch name
        id: branch-name
        run: echo "BRANCH=$(echo ${{ vars.REPLACE_WITH_VARIABLE }}-${{ steps.today.outputs.TODAY }} | tr -d '[:space:]' | tr -d ':')" >> $GITHUB_OUTPUT

      - name: Download and commit simplifier source code
        run: |
          if [[ ! -e /${{ vars.REPLACE_WITH_VARIABLE }}/README.md ]]; then     mkdir -p ${{ vars.REPLACE_WITH_VARIABLE }}; echo -e "# Current FHIR IG Template\nThis folder contains the Simplifier Project [${{ vars.REPLACE_WITH_VARIABLE }}](https://simplifier.net/${{ vars.REPLACE_WITH_VARIABLE }})\n\n## Last Updated\nUpdated at: $(date)\n" > ${{ vars.REPLACE_WITH_VARIABLE }}/README.md; fi
          cd ${{ vars.REPLACE_WITH_VARIABLE }}
          rm -rf backup
          mkdir -p backup
          cd backup
          wget --user ${{secrets.SIMPLIFIER_USER}} --password ${{secrets.SIMPLIFIER_PWD}} https://api.simplifier.net/${{ vars.REPLACE_WITH_VARIABLE }}/zip -O export.zip
          unzip export.zip -x settings.style
          rm -f export.zip
          cd ..
          export NUMLINES=$(wc -l < README.md) #Updates README file. Shows when last updated but also used to ensure changes made for the PR / merge steps below
          export NUMLINES=$(($NUMLINES-2))
          head -$NUMLINES README.md > README1.md
          echo "" >> README1.md
          echo "Updated at: $(date)" >> README1.md
          mv README1.md README.md 
     
      - name: Create branch and commit
        run: |
          git config --global user.name "${{ vars.REPLACE_WITH_VARIABLE }}.Backup"
          git config --global user.email "username@users.noreply.github.com"
          git checkout -b ${{ steps.branch-name.outputs.BRANCH }}
          git add -A
          git commit -m "${{ steps.today.outputs.TODAY }}"
          git push origin ${{ steps.branch-name.outputs.BRANCH }}

      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '${{ vars.REPLACE_WITH_VARIABLE }} ${{ steps.today.outputs.TODAY }}',
              owner,
              repo,
              head: '${{ steps.branch-name.outputs.BRANCH }}',
              base: 'main',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['backup', 'automated pr']
            });

      - name: Wait for PR to complete
        run: sleep 1m

      - name: "Merge pull request"
        uses: "actions/github-script@v6"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const head = '${{ steps.branch-name.outputs.BRANCH }}'
            await new Promise(r => setTimeout(r, 2000));
            const { data } = await github.rest.pulls.list({ owner, repo, head, per_page: 1 });
            if (data.length) {
              const pull_number = data[0].number;
              await github.rest.pulls.merge({ owner, repo, pull_number, merge_method: "squash"});
            }

